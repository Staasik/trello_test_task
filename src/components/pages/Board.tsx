import React, { useState, useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import { useParams } from "react-router-dom";
import { AppState, List, findBoardWithId } from "../../redux/reducer";
import { addList, loadBoards } from "../../redux/actions";
import Lists from "../elements/Lists";
import {HtmlWrapper,Logo,Text,Container,AddList,SelectedBoard,ListDescription,Name,BoardName,} from "../../styles/pages/Board";
import {StyledLink,SvgClose} from "../../styles/pages/Main";

function MyBoard() {
  const { boardId } = useParams(); // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ URL
  const [newList, setNewList] = useState<boolean>(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
  const [listName, setListName] = useState<string>(""); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞

  const boards = useSelector((state: AppState) => state.boards); // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫ –∏–∑ Redux —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const dispatch = useDispatch(); // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ Redux
  const currentBoardId = parseInt(boardId!); // –ê–π–¥–∏ —Ç–µ–∫—É—â–µ–π –¥–æ—Å–∫–∏
  const currentBoard = findBoardWithId(boards, currentBoardId); // –ù–∞–π—Ç–∏ –¥–æ—Å–∫—É –ø–æ –∞–π–¥–∏

  useEffect(() => {
    dispatch(loadBoards()); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å–∫–∏
  }, [dispatch]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
  function createList() {
    setNewList(true);
  }
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
  function closeList() {
    setNewList(false);
    setListName(""); // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã
  }
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —ç–Ω—Ç–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
  function handleEnterPress(event: React.KeyboardEvent<HTMLTextAreaElement>) {
    if (event.key === "Enter") {
      saveList();
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
  function saveList() {
    if (listName.trim() !== "") {
      const newList: List = {id: Date.now(), name: listName, items: []}; // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      dispatch(addList(currentBoard.id, newList)); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç –≤ Redux —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setListName("");
      setNewList(false);
    }
  }

  return (
    <HtmlWrapper>
      <Logo><StyledLink to="/">TrelloüòÄ</StyledLink></Logo>
      <Container>
        <SelectedBoard>
          <BoardName>
            <Text>{currentBoard?.name}</Text>
          </BoardName>
          <AddList onClick={createList}>–î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫</AddList>
          {newList && (
            <ListDescription>
              <Name
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞"
                maxLength={25}
                value={listName}
                onChange={(e) => setListName(e.target.value)}
                onKeyDown={handleEnterPress}
              />
              <SvgClose onClick={closeList}/>
            </ListDescription>
          )}
        </SelectedBoard>
        <Lists currentBoardId={currentBoardId} />
      </Container>
    </HtmlWrapper>
  );
}

export default MyBoard;